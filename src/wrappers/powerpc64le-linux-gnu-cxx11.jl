# Autogenerated wrapper script for SZ3_jll for powerpc64le-linux-gnu-cxx11
export libSZ3c, libhdf5sz3, mdz, mdz_smoke_test, sz3, sz3_smoke_test

using CompilerSupportLibraries_jll
using GSL_jll
using HDF5_jll
using Zstd_jll
JLLWrappers.@generate_wrapper_header("SZ3")
JLLWrappers.@declare_library_product(libSZ3c, "libSZ3c.so")
JLLWrappers.@declare_library_product(libhdf5sz3, "libhdf5sz3.so")
JLLWrappers.@declare_executable_product(mdz)
JLLWrappers.@declare_executable_product(mdz_smoke_test)
JLLWrappers.@declare_executable_product(sz3)
JLLWrappers.@declare_executable_product(sz3_smoke_test)
function __init__()
    JLLWrappers.@generate_init_header(CompilerSupportLibraries_jll, GSL_jll, HDF5_jll, Zstd_jll)
    JLLWrappers.@init_library_product(
        libSZ3c,
        "lib/libSZ3c.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_library_product(
        libhdf5sz3,
        "lib/libhdf5sz3.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_executable_product(
        mdz,
        "bin/mdz",
    )

    JLLWrappers.@init_executable_product(
        mdz_smoke_test,
        "bin/mdz_smoke_test",
    )

    JLLWrappers.@init_executable_product(
        sz3,
        "bin/sz3",
    )

    JLLWrappers.@init_executable_product(
        sz3_smoke_test,
        "bin/sz3_smoke_test",
    )

    JLLWrappers.@generate_init_footer()
end  # __init__()
